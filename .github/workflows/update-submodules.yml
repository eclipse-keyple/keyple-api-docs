name: Update Submodules and Publish

on:
  workflow_dispatch: {}
  repository_dispatch:
    types: [update-submodules]
  push:
    branches:
      - gh-pages

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          submodules: recursive
          fetch-depth: 0

      - name: Set Git user identity
        run: |
          git config --global user.name "Eclipse Keyple Bot"
          git config --global user.email "${{ github.repository }}-bot@eclipse.org"

      - name: Update Git submodules
        id: commit
        run: |
          git submodule update --init --recursive --remote
          git add .
          COMMIT_MSG="Update submodules to latest commit"
          if [[ -n $(git status --porcelain) ]]; then
            git commit -m "$COMMIT_MSG"
            echo "changes_detected=true" >> $GITHUB_ENV
          else
            echo "No changes to commit"
            echo "changes_detected=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show the version of the submodules
        run: git submodule foreach --recursive 'git rev-parse HEAD'

      - name: Process UML documentation
        if: env.changes_detected == 'true'
        run: |
          echo "Processing UML documentation..."

          # Step 1: Delete all folders containing "-uml" in gh-pages
          echo "Deleting existing -uml folders..."
          for dir in *-uml*/; do
            if [ -d "$dir" ]; then
              echo "Deleting $dir"
              rm -rf "$dir"
            fi
          done

          # Step 2: Process all submodules
          echo "Processing submodules..."
          git submodule foreach --quiet 'echo $name' | while read -r module; do
            echo "Checking module: $module"

            # Check if module name contains "-java-" or "kmp"
            if [[ "$module" == *"-java-"* ]] || [[ "$module" == *"kmp"* ]]; then
              echo "Processing module: $module"

              # Determine the UML folder name
              if [[ "$module" == *"-java-"* ]]; then
                uml_module="${module//-java-/-uml-}"
              else
                # For kmp modules
                uml_module="${module//kmp/uml}"
              fi

              echo "Creating UML version: $uml_module"

              # Copy the entire folder
              cp -r "$module" "$uml_module"

              # Navigate to the new folder
              cd "$uml_module"

              # Step 3: Clean up version folders - keep only api_class_diagram.svg
              echo "Cleaning up version folders in $uml_module..."
              for version_dir in */; do
                if [ -d "$version_dir" ]; then
                  # Skip special directories
                  if [[ "$version_dir" == "_layouts/" ]] || [[ "$version_dir" == ".git/" ]]; then
                    continue
                  fi

                  echo "Processing version folder: $version_dir"
                  cd "$version_dir"

                  # Keep only api_class_diagram.svg at the root, delete everything else
                  find . -mindepth 1 ! -name "api_class_diagram.svg" -delete

                  cd ..
                fi
              done

              # Step 4: Modify list_versions.md
              if [ -f "list_versions.md" ]; then
                echo "Modifying list_versions.md..."
                # Remove [API documentation](xxx)<br> patterns
                sed -i 's/\[API documentation\]([^)]*)<br>//g' list_versions.md
              fi

              # Go back to root
              cd ..

              echo "Finished processing $module -> $uml_module"
            fi
          done

          # Add all changes to git
          git add .

          # Commit UML changes if any
          if [[ -n $(git status --porcelain) ]]; then
            git commit -m "Generate UML documentation from updated submodules"
            echo "UML documentation changes committed."
          else
            echo "No UML documentation changes to commit."
          fi

          echo "UML documentation processing completed."

      - name: Push changes if any
        if: env.changes_detected == 'true'
        run: |
          git push origin HEAD:gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}